# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
First we simplify those two equations.
- max(|a - b|, |a + b|) = |a| + |b| >= max(|a|, |b|) holds for all (a, b) pairs
-  min(|a - b|, |a + b|) = ||a| - |b|| <= min(|a|, |b|) holds if and only if |b| <= |a| WLOG let set |a| < |b|

# Approach
<!-- Describe your approach to solving the problem. -->
1. Take the absolute value of every element in nums and sort the array.

2. Use a two-pointer technique:

    - For each left index l, move the right pointer r as far as possible while A[r] <= 2 * A[l].

    - All indices between l+1 and r-1 form valid pairs with l.

3. Sum up these contributions for all l.

# Complexity
- Time complexity: nlogn
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity: n 
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```python3 []
class Solution:
    def perfectPairs(self, nums: List[int]) -> int:
        A = sorted(abs(x) for x in nums)
        n = len(A)
        ans = 0
        r = 0
        for l in range(n):
            if r < l + 1:
                r = l + 1
            while r < n and A[r] <= 2 * A[l]:
                r += 1
            ans += (r - l - 1)  # pairs (l, l+1..r-1)
        return ans
        
```