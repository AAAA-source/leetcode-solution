# 2825. Partition Array Into K-Distinct Groups  

# **Intuition**  
We need to partition all elements of `nums` into groups, each containing exactly `k` **distinct** elements.  

This leads to three necessary conditions:  
1. The total number of elements `n` must be divisible by `k`.  
2. Each element can appear in at most `n / k` groups.  
3. The number of distinct elements must be at least `k`.  

If all three conditions are satisfied, partitioning is possible.  

---

# **Approach**  
1. **Check divisibility**  
   * If `n % k != 0`, return `false`.  

2. **Count frequency**  
   * Use `unordered_map` to store how many times each element appears.  

3. **Validate constraints**  
   * If any frequency > `n / k`, return `false`.  
   * If distinct count < `k`, return `false`.  

4. **Return result**  
   * Otherwise, return `true`.  

---

# **Complexity**  
* Time complexity: **O(n)**  
  * Building frequency map  
  * Checking constraints  

* Space complexity: **O(n)**  
  * Hash map storage in worst case  


# **Code (C++)**  

```cpp
class Solution {
public:
    bool partitionArray(vector<int>& nums, int k) {
        int n = nums.size();

        // Condition 1: length must be divisible by k
        if (n % k != 0) return false;

        int num_group = n / k;
        unordered_map<int, int> freq;

        // Count frequency
        for (int x : nums) {
            freq[x]++;
        }

        // Condition 2: check frequency constraint
        for (auto &p : freq) {
            if (p.second > num_group) {
                return false;
            }
        }

        // Condition 3: must have at least k distinct numbers
        if ((int)freq.size() < k) return false;

        return true;
    }
};
