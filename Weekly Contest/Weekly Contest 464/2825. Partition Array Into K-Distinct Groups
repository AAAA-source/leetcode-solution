2825. Partition Array Into K-Distinct Groups
Intuition

We want to partition all elements of the array into groups, where each group contains exactly k distinct elements.
This implies:

The total number of elements n must be divisible by k (otherwise cannot form groups of equal size).

Let num_group = n / k. Each element can appear in at most num_group groups, since every group can contain that element at most once.

The number of distinct elements must be at least k, otherwise we cannot even form one valid group.

If all these conditions are satisfied, partitioning is possible.

Approach

Check divisibility: If n % k != 0, immediately return false.

Count frequency: Use a hash map (unordered_map) to store counts of each number.

Validate frequency: If any count exceeds num_group, return false.

Check distinct count: If the number of unique elements is less than k, return false.

If all checks pass, return true.

Complexity

Time Complexity:

Building frequency map: O(n)

Checking constraints: O(n)
Total: O(n)

Space Complexity:

Frequency map storage: O(n) in worst case (all distinct).

Code
class Solution {
public:
    bool partitionArray(vector<int>& nums, int k) {
        int n = nums.size();

        // Condition 1: length must be divisible by k
        if (n % k != 0) return false;

        int num_group = n / k;
        unordered_map<int, int> freq;

        // Count frequency
        for (int x : nums) {
            freq[x]++;
        }

        // Condition 2: check frequency limit
        for (auto &p : freq) {
            if (p.second > num_group) {
                return false;
            }
        }

        // Condition 3: need at least k distinct numbers
        if ((int)freq.size() < k) return false;

        return true;
    }
};
